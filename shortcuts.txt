==Vim Command Mode

:echo @%
	show current file pathname

:scriptnames
	show all plugin scripts loaded 

:set showcmd
	show input in normal mode on the bottom

:/\c<search_text>
	case-insensitive search

:<search_range>
	%   - entire file
	2,4 - from line 2 to 4
	.   - current line
	$   - last line of the file

:/<locationA>/;/<locationB>/ <command>
	move cursor to location A, then to B. Run <command>
	i.e. :/^CTRL/;/^CTRL/g/co $
		=> this selects the lines from the first CTRL to the next
	
:/<locationA>/,/<locationB>/ <command>
	the cursor stays where it is 
	i.e. :/^CTRL/,/^CTRL/g/co $
		=> this only selects the line wher the first CTRL is 

When searching...
	\+ -> use it like '+' in regex in other languages

When replacing...
	\r -> new line
	&  -> the text that matches search pattern

:read !<bash command>
	output of <bash command> is written to the buffer

CTRL-B 
        cursor to beginning of command-line
CTRL-E 
        cursor to end of command-line
CTRL-W      Delete the |word| before the cursor.  This depends on the
        'iskeyword' option.
CTRL-U      Remove all characters between the cursor position and
        the beginning of the line.  

CTRL-R
		Access register, followed by a number or symbol

== Vim Normal Mode
'' or ``
	back to the previous cursor position

A
	Apppend from the end of the line
I
	Insert from the beginning of the line
s
	delete the character and insert

==Bash
Ctrl + a – go to the start of the command line
Ctrl + e – go to the end of the command line
Ctrl + k – delete from cursor to the end of the command line
Ctrl + u – delete from cursor to the start of the command line
Ctrl + w – delete from cursor to start of word (i.e. delete backwards one word)
Ctrl + y – paste word or text that was cut using one of the deletion shortcuts (such as the one above) after the cursor
Ctrl + xx – move between start of command line and current cursor position (and back again)
Alt + b – move backward one word (or go to start of word the cursor is currently on)
Alt + f – move forward one word (or go to end of word the cursor is currently on)
Alt + d – delete to end of word starting at cursor (whole word if cursor is at the beginning of word)
Alt + c – capitalize to end of word starting at cursor (whole word if cursor is at the beginning of word)
Alt + u – make uppercase from cursor to end of word
Alt + l – make lowercase from cursor to end of word
Alt + t – swap current word with previous
Ctrl + f – move forward one character
Ctrl + b – move backward one character
Ctrl + d – delete character under the cursor
Ctrl + h – delete character before the cursor
Ctrl + t – swap character under cursor with the previous one

grep -v <pattern> 
	invert match (does not contain)

find <where> -name <name>
	<name> has to be a simple regex like '*.html' (can't user '.*' but '*' would do)

find <where> -regex <pattern>
	find anything that matches the <pattern> in <where>

find <where> -type <flag>
	flag: f => regular file, d => directory

find <where> -not ....
	find that doesn't match ...

find <condition> -exec grep <pattern> {} +
	look for <pattern> inside the results of `find <condition>`, display with its filename 
	(separate `grep` command runs for each result of `find <condition>`)
	This is supposed to be the same as how `xargs` command runs.

find <condition> -exec grep <pattern> {} \; 
	look for <pattern> inside the resutls of `find <condition>`, display without its filename
	(all of the results of `find <condition>` are given to `grep` command) 
