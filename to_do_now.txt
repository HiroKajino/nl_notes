Q to Erin:
	# of students who started interacive lessons might be miscalculatd in teacher level.
	=> what should we do about this?
	Diffs btw onlin platform participants and active students who signed in through gb joincode

Q to Duy/Eng. Team
	Add Sentry error to client code
	Use Redis for search cache

== Admin Dashboard ==
Uncaught TypeError: Cannot read property 'district_name' of undefined
	happened in employee view, after switching from Franklin to Middletown Unif
	-> cannot reproduce the bug. happend a few times but intermittently.

<Start Here>
Monday spent all day including 'active student' column.
Spent most of that optimizing/organizing cache structure
New script has run only for Dublin
Dublin works!
	=> include page views in the cache so that it hits DB fewer times 
	=> also includes teacher's user_docs in cache
	=> then run the script to other districts
	=> Can we do something about IteractiveAnswers/Submission??

Updata scripts and deploy 
update documentation


Improve Employee Access UI & functions
	intuitive UI
	Able to see expired Districts
	
	User Redis to cache query data with short life span.

Issues
	When a loding fails in one school, it fails all -> fix this

=Future Admin Dashboard=
	Consolidate duplicate teachers with different email addresses
	Add Sentry error to client code
	Fix Pending user number
	Customizable 'Active' definition
	click teachers and know what's been downloaded
	When signing as 'Admin', straight to Admin Dashboard
	Allow back-forward browser navigation
	Speedy page load
	Employee-only columns

== standard-to-skill-migration ==
Discussion on Skill Browser button sizes and tag length. -> save this for future when we have a data. 
	- 20%, 30%, 45% 


** Skill Tagger **
Phase 1
	goal: 
		- curriculum team is able to start tagging skills
		- no impact to user facing feature
	x check skill functionality in lesson-details page
	x include 'focus_skill' field in gameboard_serach.skill_tags (set this up in models)
	
	x edit lesson-details page to accomodate new skill structure
	
	x auto-exclude unwanted grade during skill insertion to user_copy docs

	x standard description
	x have standards show up in item section

	x for now, setup standard-retrieval from skills, then disable it for now
	x teacher's guided

	x how to have standards from skills and old skills coexist in terms of teacher view?
		- author cannot edit state standards any more.
		- CCSS should be sync'ed with what author does.
		- we don't want to keep 'standards' field when standard-tagging is complete

		A: 
			- When needed in front end, CCSS standards are generated from skills
			- Old CCSS still exists in document, but won't be used

		B:
			- New tagging does not sync, meaning item will display old standards

		C: 
			- When CCSS are changed by the author, it override existing CCSS standards in 'stanards' field
			- fewer places to re-write code
	     => C.a: do this in backend script
	     		- I would have a better control of data. Not having to track down what's happened in front-end.
			C.b: do this in real-time in frontend

	x edit take_snapshot to quarantine skills in master usercopy

	x disable skill browser
	
	x finish writing scripts to insert skills (gather all active master user_copies)
	
	X adjust tag-skills browser based on Q to Erin.
	
	x check diffs and refactor code.
		- use set instead of list (js)
		- computed to pureComputed (js)
		- call observable only once per function

	x make tag-skills-modal universal for Ashley's compo

	x identify and remove unused routes related to skills
	
	- re-import, do all the manual tests
	
	x document the process and expectations

Between Phases
	- write a script to override standards with skills' standards
	- insert new standard (non-ccss) mapping

Phase 2
	goal: taggled skills will take effect.

	- propagate changes in master usercopy to its children edition usercopies
	- check functions in skills browser
	- pdg generation
	- project_details UI (display of skills)
	- test the process from item tagging all the way to gameboard_search (it's been tested. just do it again)

	- change front end logic to display standards. Now standards only carry '_id' and 'grade'. This is a new change,
	  and no work has been done to accomodate this.

Unleash when all skills are tagged
	-- pacerrabbit --
	+ ItemWithSkills
		__standard_by_category => __standard_by_category_new
		== displayed standards for the item to sync'ed with new tagging feature

	+ TeacherGuideSection
		item_with_standards.standards =>  .__computed_standards
		== standard table

	+ Skills Browser in browse-by-standard.html

	-- models -- 	
	+ models.ResourceWithItems.get_all_standard_ids
		enable commented-out code
		== for teacher-guide section

	+ models.RefAsGameboard
		gather skill info from metadata and transfer to PublishedGameboard as 'categories'
		__init__ and construct_tags (switch between old code and new code)

	+ models.InteractiveResourceUserCopy.take_snapshot
		__remove_all_skills

	+ models.RefAsGameboard.__init__
		uncomment 'skill_tags' in lesson_details_field

	+ models.Gameboard.get_standards()
		comment out if self.has_interactive_version() clause to draw updated standards

Suggestions
	- consider organizing standards' subject naming
	- in interactive resources, get standard descriptions only once
		now it does at least twice(initial load, and tag-skills modal)

	- update of usercopy edition happen in views.py. => should be in the model


When a state standard is tagged with skill,
	- automatically add state standards to existing usercopy.items.skills
	- the standard info sync in Ref.combined_tags and PublishedGameboard.categories


Issues:
	- author views items donn't show standard's description on hover if the standards hadn't been a part of the lesson already. (b/c server grabs only descriptions of existing standards)

** Other Tasks **

= Write more tests
	- UserCopy.set/unset_confidence_score_questions
	- HierarchicalTag.get_all_as_tree()
	- get_all_skills_w_standards()
	- has_purchased_lessons / has_payment_record / get_disabled_lessons


= ConfidenceScore
	ConfidenceScore, instead of username, show student's actual name
	change 'vision' to 'Real World Connection'

= npm migration
	- ignore exportsOverride in bower.json and migrate just dependencies (we don't know what they are)

	- Grunt -> standard browser, project platform page
	- migrating to gulp is a huge task for standard browser

Delete the following files when confirmed that it's unnecessary
./client/src/common/components/footer-nextlesson.html
./client/src/common/components/footer-nextlesson.js
./client/src/common/components/header-nextlesson.html
./client/src/common/components/header-nextlesson.js
