== meeting with Erin
	What's done:
		Users could create accounts with the same google email with 'email' creation.
		school year to 7/1 - 6/30

		on some routes, targetpage was not saved 
			i.e. login error, old lesson platforms, project_details
			-fixed

		project_details page -> 'login to downloaed for free' instead of 'signup'

		no more userinfo is necessary for login
			route changed

		checkout should go to 'login' page instead of 'signup' page

		Many people have created duplicate email accounts as recently as 7/1 (google login has been causing it)
		total of 1605 such users
			no longer able to create a new user with the same google email

	check:
		signin error page


				
== Admin Dashboard ==
	Activity Modal instead of Download history
		original lesson column
			Jorge Albarran ==> original flags to be true
			google_user_116832471028620047361 | Fairfield-Suisun USD Public Safety Academy 

			Katherine McKenna ==> original flags to be false (2015-16 year)
			google_user_112215999174643378653 | Green Valley Middle School | katherinem@fsusd.org


== get-userinfo-modal ==
	- the 'force-update-date' is set in my-nextlesson.es6
	- it makes the user update grades, subjects, and standards
	- TODO: change text depending on whether user has never entered info / needs updates
	- Q: What about district info? What about the role?



== Google Signin ==
	Test Cases
		Teacher
		Student
		Parent
		pending user
		duplicate email users

	After signing up with email
		main page:
			-> login with email
			-> login Google (goes to account link)

			-> signup with the same email through email signup (it shouldn't let you)
			-> signup with the same email through Google signup
				-> account_link

			(account_link)
				-> proceed to link
				-> login with email

		access auth-required site:
			-> test all above cases on
				interestid
				checkout
				interactive lessons


	After signing up with Google
		main page:
			-> login Google 

			-> signup with the same email through email signup (it shouldn't let you)
			-> signup with the same email through Google signup
				-> error message, then login with Google 

		access auth-required site:
			-> test all above cases on
				interestid
				checkout
				interactive lessons

	After signing in without any email(student only)

	With no signup history
		login from main page:
			-> login with email
			-> login Google (goes to account link)
				=> Fail, account does not exist page
					-> signup
					-> login (come back to account fail)
						-> signup

		access auth-required site:
			interestid
			checkout
			interactive lessons

== Current Tasks ==
	Usertype selection removed from login, keep it in signin
	Clean up the login route so that usertype is no longer necessary.

<Start here>
	Testing is done except for Edmodo users

	Issues:
		* my-cart page, login modal is not updated with the new one. check the my-cart file to see what js is required
		* on sign up modal (signed up google accoutn, then trying to sign up again), 'Click here' link doesnt' work

	Tasks/Errors	
		investigate @route('/students/google/signup') - make sure that nothing is breaking here
		search page header UI looked wierd but maybe resolved on its own - double check to make sure that it has.
	
	Test Edmodo users

	Ask E-team for other features that could be affected the user's google api addition
		What does google classroom link look like?

	Add comments to google-acccount-signin
	Deploy!!

	Confirm school year start/end
	Finish Account Info Update Modal
	Finish Admin Dashboard email	

	Starts web API documentation

	Lower priority--
		Refactor:
			MARK2: Consider consolidating this with set_initial_district_and_school_ids
			Consider description pop ups into a component or templates

		Performance improvement
			localStorage(frontend)
			cache by district (backend)
		
	With E-team
		Consolidate duplicate teachers with different email addresses
		Fix Pending user number


== standard-to-skill-migration ==
Discussion on Skill Browser button sizes and tag length. -> save this for future when we have a data. 
	- 20%, 30%, 45% 


** Skill Tagger **
Phase 1
	goal: 
		- curriculum team is able to start tagging skills
		- no impact to user facing feature
	x check skill functionality in lesson-details page
	x include 'focus_skill' field in gameboard_serach.skill_tags (set this up in models)
	
	x edit lesson-details page to accomodate new skill structure
	
	x auto-exclude unwanted grade during skill insertion to user_copy docs

	x standard description
	x have standards show up in item section

	x for now, setup standard-retrieval from skills, then disable it for now
	x teacher's guided

	x how to have standards from skills and old skills coexist in terms of teacher view?
		- author cannot edit state standards any more.
		- CCSS should be sync'ed with what author does.
		- we don't want to keep 'standards' field when standard-tagging is complete

		A: 
			- When needed in front end, CCSS standards are generated from skills
			- Old CCSS still exists in document, but won't be used

		B:
			- New tagging does not sync, meaning item will display old standards

		C: 
			- When CCSS are changed by the author, it override existing CCSS standards in 'stanards' field
			- fewer places to re-write code
	     => C.a: do this in backend script
	     		- I would have a better control of data. Not having to track down what's happened in front-end.
			C.b: do this in real-time in frontend

	x edit take_snapshot to quarantine skills in master usercopy

	x disable skill browser
	
	x finish writing scripts to insert skills (gather all active master user_copies)
	
	X adjust tag-skills browser based on Q to Erin.
	
	x check diffs and refactor code.
		- use set instead of list (js)
		- computed to pureComputed (js)
		- call observable only once per function

	x make tag-skills-modal universal for Ashley's compo

	x identify and remove unused routes related to skills
	
	- re-import, do all the manual tests
	
	x document the process and expectations

Between Phases
	- write a script to override standards with skills' standards
	- insert new standard (non-ccss) mapping

Phase 2
	goal: taggled skills will take effect.

	- propagate changes in master usercopy to its children edition usercopies
	- check functions in skills browser
	- pdg generation
	- project_details UI (display of skills)
	- test the process from item tagging all the way to gameboard_search (it's been tested. just do it again)

	- change front end logic to display standards. Now standards only carry '_id' and 'grade'. This is a new change,
	  and no work has been done to accomodate this.

Unleash when all skills are tagged
	-- pacerrabbit --
	+ ItemWithSkills
		__standard_by_category => __standard_by_category_new
		== displayed standards for the item to sync'ed with new tagging feature

	+ TeacherGuideSection
		item_with_standards.standards =>  .__computed_standards
		== standard table

	+ Skills Browser in browse-by-standard.html

	-- models -- 	
	+ models.ResourceWithItems.get_all_standard_ids
		enable commented-out code
		== for teacher-guide section

	+ models.RefAsGameboard
		gather skill info from metadata and transfer to PublishedGameboard as 'categories'
		__init__ and construct_tags (switch between old code and new code)

	+ models.InteractiveResourceUserCopy.take_snapshot
		__remove_all_skills

	+ models.RefAsGameboard.__init__
		uncomment 'skill_tags' in lesson_details_field

	+ models.Gameboard.get_standards()
		comment out if self.has_interactive_version() clause to draw updated standards

Suggestions
	- consider organizing standards' subject naming
	- in interactive resources, get standard descriptions only once
		now it does at least twice(initial load, and tag-skills modal)

	- update of usercopy edition happen in views.py. => should be in the model


When a state standard is tagged with skill,
	- automatically add state standards to existing usercopy.items.skills
	- the standard info sync in Ref.combined_tags and PublishedGameboard.categories


Issues:
	- author views items donn't show standard's description on hover if the standards hadn't been a part of the lesson already. (b/c server grabs only descriptions of existing standards)


** Other Tasks **

= Write more tests
	- UserCopy.set/unset_confidence_score_questions
	- HierarchicalTag.get_all_as_tree()
	- get_all_skills_w_standards()
	- has_purchased_lessons / has_payment_record / get_disabled_lessons


= ConfidenceScore
	ConfidenceScore, instead of username, show student's actual name
	change 'vision' to 'Real World Connection'

= npm migration
	- ignore exportsOverride in bower.json and migrate just dependencies (we don't know what they are)

	- Grunt -> standard browser, project platform page
	- migrating to gulp is a huge task for standard browser

Delete the following files when confirmed that it's unnecessary
./client/src/common/components/footer-nextlesson.html
./client/src/common/components/footer-nextlesson.js
./client/src/common/components/header-nextlesson.html
./client/src/common/components/header-nextlesson.js
