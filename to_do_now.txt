√make copeis of standard doc with correct info
change standard names in existing documents
delete old standard documents

<Monday>
Get familiar with Keen api
Read Keen Doc to get analysis with python code, from where should the query happen (Controller, or Model?)
Read API Ref -> Compute section for Keen API details
What is the paid feature in Keen, and what query can I do with them w/o extra charge?
Start implementing the metrics as a class (see the bottom list)
Need to setup Keen Read Key

import math
adjust button width on skill-browser: math>measurement>measurement
√ remove currently in beta(done in local repo, not merged)

district-dashboard

** Skill Tagger **
Phase 1
	goal: 
		- curriculum team is able to start tagging skills
		- no impact to user facing feature
	x check skill functionality in lesson-details page
	x include 'focus_skill' field in gameboard_serach.skill_tags (set this up in models)
	
	x edit lesson-details page to accomodate new skill structure
	
	x auto-exclude unwanted grade during skill insertion to user_copy docs

	x standard description
	x have standards show up in item section

	x for now, setup standard-retrieval from skills, then disable it for now
	x teacher's guided

	x how to have standards from skills and old skills coexist in terms of teacher view?
		- author cannot edit state standards any more.
		- CCSS should be sync'ed with what author does.
		- we don't want to keep 'standards' field when standard-tagging is complete

		A: 
			- When needed in front end, CCSS standards are generated from skills
			- Old CCSS still exists in document, but won't be used

		B:
			- New tagging does not sync, meaning item will display old standards

		C: 
			- When CCSS are changed by the author, it override existing CCSS standards in 'stanards' field
			- fewer places to re-write code
	     => C.a: do this in backend script
	     		- I would have a better control of data. Not having to track down what's happened in front-end.
			C.b: do this in real-time in frontend

	x edit take_snapshot to quarantine skills in master usercopy

	x disable skill browser
	
	x finish writing scripts to insert skills (gather all active master user_copies)
	
	X adjust tag-skills browser based on Q to Erin.
	
	x check diffs and refactor code.
		- use set instead of list (js)
		- computed to pureComputed (js)
		- call observable only once per function

	x make tag-skills-modal universal for Ashley's compo

	x identify and remove unused routes related to skills
	
	- re-import, do all the manual tests
	
	x document the process and expectations

Between Phases
	- write a script to override standards with skills' standards
	- insert new standard (non-ccss) mapping

Phase 2
	goal: taggled skills will take effect.

	- propagate changes in master usercopy to its children edition usercopies
	- check functions in skills browser
	- pdg generation
	- project_details UI (display of skills)
	- test the process from item tagging all the way to gameboard_search (it's been tested. just do it again)

Unleash when all skills are tagged
	-- pacerrabbit --
	+ ItemWithSkills
		__standard_by_category => __standard_by_category_new
		== displayed standards for the item to sync'ed with new tagging feature

	+ TeacherGuideSection
		item_with_standards.standards =>  .__computed_standards
		== standard table

	+ Skills Browser in browse-by-standard.html

	-- models -- 	
	+ models.ResourceWithItems.get_all_standard_ids
		enable commented-out code
		== for teacher-guide section

	+ models.RefAsGameboard
		gather skill info from metadata and transfer to PublishedGameboard as 'categories'
		__init__ and construct_tags (switch between old code and new code)

	+ models.InteractiveResourceUserCopy.take_snapshot
		__remove_all_skills

	+ models.RefAsGameboard.__init__
		uncomment 'skill_tags' in lesson_details_field

	+ models.Gameboard.get_standards()
		comment out if self.has_interactive_version() clause to draw updated standards

Suggestions
	- consider organizing standards' subject naming
	- in interactive resources, get standard descriptions only once
		now it does at least twice(initial load, and tag-skills modal)

	- update of usercopy edition happen in views.py. => should be in the model


When a state standard is tagged with skill,
	- automatically add state standards to existing usercopy.items.skills
	- the standard info sync in Ref.combined_tags and PublishedGameboard.categories


Issues:
	- author views items donn't show standard's description on hover if the standards hadn't been a part of the lesson already. (b/c server grabs only descriptions of existing standards)

** Other Tasks **

= Write more tests
	- UserCopy.set/unset_confidence_score_questions
	- HierarchicalTag.get_all_as_tree()
	- get_all_skills_w_standards()
	- has_purchased_lessons / has_payment_record / get_disabled_lessons

= Heroku Migration
	push to main app

= npm migration
	- ignore exportsOverride in bower.json and migrate just dependencies (we don't know what they are)

	- Grunt -> standard browser, project platform page
	- migrating to gulp is a huge task for standard browser



= Admin Dashboard	
	1. admin-page:
		- Do this fist to make it easy to test the above feature
		- Peruse: edit users' district_admin status
		- district_access, and site_access_flag
			- let the user see all users' info within the district
		- 
		
		Add to User document
			- district_admin_user: T/F
			- district_access: T/F
			- district_access: T/F

	2. my-nextlesson page:
		- UI adjustment
		- only visible to admin users
	
		
	3. add page metrics to track usage
	Access Denied page(403):
		- Any current 403 page?

	Build district_dashboard page
	
	Questions:
	- admin dashbaord:
		* 'user_type' in edit-user-modal (for site admin pag) is recorded in DB as school_district_user_type
		?: What does 'school_district_account_type' does?
		?: How do you want to use 'school_district_account_type'? Do you want to base district_admin_user's value on this, for keep them separate?
		?: If so, chagne edit-user-modal's selection to dropdown.
		=> any chagnes to school_district_user_type?

	- metrics:
		? is daily_metrics obsolete?
		/metrics/daily_metrics/ returns 500


	What Metrics are being recorded and ready to be aggregated?
		Keen:
		Internal Metrics:
			
		Google Analytics:
			set up in very limited (and obscure) pages and don't understand it well. Ignore this for now.

		What information is useful for the team?
		Where do we get that info, and aggregate them?

		Admin Dashboard
			for admin_district:
				Filter By...
				date (only possible with users whose 'downloads' fields exist, which are the most users, and I'm guessing they are the newer users) 

			Group By...
			By Entire District
			By Site
			By Teacher
			By Student
				=Keen
				number of times access (Keen, use extraction, ,page-views(page=interactive-view), filter by username
				number of times going to certain pages (Keen page views, filter by username of teachers)
				number of times student toggling interest ids (Keen)

				=NL internal DB
				number of downloaded lessons (--> only in internal metrics)
				number of students used the lessons(user_copy.last_opened => filter users by students)
				confidence score results
				last active use (user_copy.last_opened)
				number of finished lessons (students submitted their work, user_copy.submissions) 

				=Leave it for now(too complicated, now focusing on getting skeleton working)
				num_of_completed_lessons'(more than a half of students who started finished): int 
				downloaded lessons by type
				standard coverage

				=not sure how to measure
				session duration (we don't know when they leave the page...)
				are they using it right?
				growth scores

				
			
			Needs to be computed prior:
				list of teachers/users per site

			Admin Dashboard Report Data Structure: Usage- from which to run query:
				[
				{'username':.., 
				 'usertype': teacher/student,
				 'district_id': ...,
				 'school_district_id': ...,
				 'teacher_ids':list (for students)
				 'grades': list,
				 'downloaded_lesson_ids': list,

				 #Keen
				 'num_of_access(any_lesson)': int, 
					# number of access grouped by the user, filtered by a group of users and page-view:interactive-view 
					analysis type: count
					collection   : page_views
					group_by : username
					filter: page=interactive-view 
						list of usernames

				 'num_of_page_views(any page in NL)': int,
					# number of access grouped by the user, filtered by a group of users (with any page-visit)

				 'num_of_intersetid_toggle'(for students):int
					analysis: count
					collection: interestid_rating_toggles,
					group_by: username
					filter: list of usernames
					* Tracking students usage is tricky because there is no direct connections between teachers and studentsc

				 #DB
				 'num_of_downloaded_lessons': int
				 'num_of_students_access_to_lessons': int,
				 'confidence_score_diff_skill': float,
				 'confidence_score_diff_vision': float,
				 'last_used': date,
				]

			
			Admin Dashboard Report Data Structure: Lesson - from which to run query:
				This dict is made for every lesson per site (could be duplicates)
				[
				{<basic lesson info>,
				 'teacher_ids': list,
				 'student_ids': list,
				 'district_id': _id,
				 'site_id': _id

				 'num_of_teachers': int,

				 #Only for interactive lessons
				 'num_of_students'(those who submitted answers'): int,
				 'num_of_submissions': int,
				]


			Implementation Ideas:
				A.
				On loading Admin Dashboard->Reports, query the server. Server returns the whole data (either district or site). When querying the server, specify the date range.
				At the server, the source of the data is defined by fields (either NL Mongo or Keen)
				Sends back the entire data (list of user information, each user in an object with their numbers) 
				Filter and grouping happens on the front end

				It's possible to directly query Keen from the browser, but it's more readable and maintainable to have one source of info (the server)

				B.
				run a query every time search conditions change

				This might be an optimal solution if the data size is not so big. However, with relatively small size of each site / district, A might work. 
				The sizes of sites/districts are small now, but we don't know how they might expand. Some districts have a very large student body. Would B be a better long term solution?
				Queries should run fast if the data is pre-computed already. Maybe run a scheduled script to generate usage data and store it in DB?

				Plan:
				Start workin on B.

		When someone downloads a lesson...
			route /track_download/....

	Delete the following files when confirmed that it's unnecessary
	./client/src/common/components/footer-nextlesson.html
	./client/src/common/components/footer-nextlesson.js
	./client/src/common/components/header-nextlesson.html
	./client/src/common/components/header-nextlesson.js
