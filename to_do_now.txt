== meeting with Erin
	All teachers see the 'Role' selector regardless
	check green check marks spacing
	checkboxes shouldn't turn green until they are updated	

	What's done:
		inserted email setting 
			if the user received welcome email within a year, she won't receive it
			even if she is re-granted access

	check:
		We delete a user from District Admin page
		user still has the school email
		user will be prompted to update her info on the next login, and she gets
		the subscription under the old email

== meetign with Duy
	What does 'merge-account' section does in get-user-info modal in my-nextlesson
				
	New collections
		- Is there such thing as edition_id for the new collections? How does it track versions?
			-> no editions for Lesson collections
			-> if both ref_id and edition_ids are present, it's Interactive PT
			-> if only ref_id is present, it's Lesson 
		- anythign different about students answers and submissions?
			- parent_id in ObjectId
		- How are `type` or `project_classification` flagged in the new lessons?
			- lesson_type ->  new but more descriptive types

		-> add parent_id index to Responses&Submission

		Important Note:
		- Interactive PTs
			- When a user downloads paper version, and the interactive version becomes available.
			- When the user access the lesson, it automatically takes him to interactive version.
			- His download tracking record of this lesson is replaced with the old one.
			=> The PT downloaded record all point to the newest version. We won't know if lessons were  
				downloaded as paper first, or interactive first. However, it is treated as 'interactive downloads'

		- other (and new) Interactive lessons 
			- When a user downloads paper version, and the interactive version becomes available.
			- When the user access the lesson, it automatically takes him to interactive version.
			- His download tracking record does not change, and it still points to the old version.
			=> The downloaded record of paper version will still show as non-interactive download even if 
				the lesson has been upgraded.

	What will happen when the paper lessons become unaccessible?
		- documents will still exist? => yes
		- any values change? => no

== Admin Dashboard ==


== get-userinfo-modal ==


== Google Signin ==
	Edmodo login does not work without usertype specified
	Enable Edmodo login like new Google login

	Test Cases
		Teacher
		Student
		Parent
		pending user
		duplicate email users

		After signing up with email
			main page:
				-> login with email
				-> login Google (goes to account link)

				-> signup with the same email through email signup (it shouldn't let you)
				-> signup with the same email through Google signup
					-> account_link

				(account_link)
					-> proceed to link
					-> login with email

			access auth-required site:
				-> test all above cases on
					interestid
					checkout
					interactive lessons


		After signing up with Google
			main page:
				-> login Google 

				-> signup with the same email through email signup (it shouldn't let you)
				-> signup with the same email through Google signup
					-> error message, then login with Google 

			access auth-required site:
				-> test all above cases on
					interestid
					checkout
					interactive lessons

		After signing in without any email(student only)

		With no signup history
			login from main page:
				-> login with email
				-> login Google (goes to account link)
					=> Fail, account does not exist page
						-> signup
						-> login (come back to account fail)
							-> signup

			access auth-required site:
				interestid
				checkout
				interactive lessons

== Current Tasks ==
	Account Info Update Modal
		Test with multiple scenarios


		without district email (no site/role setup)
			First login 
				- There shouldn't be any 'Update' text
				- no site or roles
				- all checkboxex gray in the beginning
				** confirm/adjust checkbox alignments

			Subsequent login
				preferences setup, but no last_updated date
				preferences setup, but outdated
					update only preferences

				preferences setup, up to date

				** all checkboxex gray in the beginning

		with district email
			First login
				- There shouldn't be any 'Update' text
				- all checkboxex gray in the beginning
				=> then activate the school's subscription
					- modal prompts site and role selection
	
			Subsquent login
				** all checkboxex gray in the beginning
				preferences setup, but no last_updated date

				preferences setup, but outdated
					with or without role
					update preferences
						- site&role pre-selected
						- 'Update' message instead of 'Set'

				preferences setup, up to date
					with role -> modal doesn't show
					without role -> modal shows only for the role

			Subsequent login after license expired

		parent user
			prompted to update prefernces, but not the roles
			
	Remember to deploy model update

	Finish Admin Dashboard email	
		Email goes out to only the new users two days after their account activation.
			when admin_site or admin_district flags are toggled
			*'send_admin_dashboard_welcome_email_on' with the date two days from the activation.
			* when the message has been sent, add 'admin_dashboard_welcome_email_sent_on' flag
		
		Test cases
			Pending user 
				-> user creates account, and has Admin Dashboard access

			Existing user
				-> added the district manually
					as Teacher
						with access
						without access
						Doesn't appear in settings page

					as non-Teacher ()
						Appear in settings page
						get appropriate access

			Add pending users from admin page
				upload one teacher
				upload many teachers
					as Teacher
						with access
						without access
						Doesn't appear in settings page

					as non-Teacher ()
						Appear in settings page
						get appropriate access
		
			** inital email settings
				alert true, frequency: every_month
				welcome email flag 
				confirm in DB 
				confirm in Admin Dashboard

			Email settings are reflected when changed in Admin dashboard
			Email settings are not affected when toggling 

			When user loses access to Admin Dashboard their email settings are reset
				alert flag off
				alert frequency preserved
				welcome email off

			When they get it back on, preserves 
				alert frequency
				welcome email recieved flag (if any was sent)	

			When removing users from admin district page
				admin_site/district disabled
	Done:
		Setting of user with flags to enable email control
		Refactor so that admin_dashboard access flags are toggled through one route
	
<Start Here>
	Work on Email template
		workin on bulk_email_sender LN2384
		email template
		email sender

	Admin Dashboard
		TODO: come up with questions to ask to Duy and Ashely
		- user history should include lessons from lesson_user_copies 
		- Consider changing Download reporting section (how to distinguish lesson types with the new interactive lessons)
		- Metrics older than project/activity are hidden for new school year

	Work on Edmodo signup

	Starts web API documentation

	Lower priority--
		Refactor:
			MARK2: Consider consolidating this with set_initial_district_and_school_ids
			Consider description pop ups into a component or templates

		Performance improvement
			localStorage(frontend)
			cache by district (backend)

		Change Edge browser date selector format
		
	With E-team
		Consolidate duplicate teachers with different email addresses
		Fix Pending user number


== standard-to-skill-migration ==
Discussion on Skill Browser button sizes and tag length. -> save this for future when we have a data. 
	- 20%, 30%, 45% 


** Skill Tagger **
Phase 1
	goal: 
		- curriculum team is able to start tagging skills
		- no impact to user facing feature
	x check skill functionality in lesson-details page
	x include 'focus_skill' field in gameboard_serach.skill_tags (set this up in models)
	
	x edit lesson-details page to accomodate new skill structure
	
	x auto-exclude unwanted grade during skill insertion to user_copy docs

	x standard description
	x have standards show up in item section

	x for now, setup standard-retrieval from skills, then disable it for now
	x teacher's guided

	x how to have standards from skills and old skills coexist in terms of teacher view?
		- author cannot edit state standards any more.
		- CCSS should be sync'ed with what author does.
		- we don't want to keep 'standards' field when standard-tagging is complete

		A: 
			- When needed in front end, CCSS standards are generated from skills
			- Old CCSS still exists in document, but won't be used

		B:
			- New tagging does not sync, meaning item will display old standards

		C: 
			- When CCSS are changed by the author, it override existing CCSS standards in 'stanards' field
			- fewer places to re-write code
	     => C.a: do this in backend script
	     		- I would have a better control of data. Not having to track down what's happened in front-end.
			C.b: do this in real-time in frontend

	x edit take_snapshot to quarantine skills in master usercopy

	x disable skill browser
	
	x finish writing scripts to insert skills (gather all active master user_copies)
	
	X adjust tag-skills browser based on Q to Erin.
	
	x check diffs and refactor code.
		- use set instead of list (js)
		- computed to pureComputed (js)
		- call observable only once per function

	x make tag-skills-modal universal for Ashley's compo

	x identify and remove unused routes related to skills
	
	- re-import, do all the manual tests
	
	x document the process and expectations

Between Phases
	- write a script to override standards with skills' standards
	- insert new standard (non-ccss) mapping

Phase 2
	goal: taggled skills will take effect.

	- propagate changes in master usercopy to its children edition usercopies
	- check functions in skills browser
	- pdg generation
	- project_details UI (display of skills)
	- test the process from item tagging all the way to gameboard_search (it's been tested. just do it again)

	- change front end logic to display standards. Now standards only carry '_id' and 'grade'. This is a new change,
	  and no work has been done to accomodate this.

Unleash when all skills are tagged
	-- pacerrabbit --
	+ ItemWithSkills
		__standard_by_category => __standard_by_category_new
		== displayed standards for the item to sync'ed with new tagging feature

	+ TeacherGuideSection
		item_with_standards.standards =>  .__computed_standards
		== standard table

	+ Skills Browser in browse-by-standard.html

	-- models -- 	
	+ models.ResourceWithItems.get_all_standard_ids
		enable commented-out code
		== for teacher-guide section

	+ models.RefAsGameboard
		gather skill info from metadata and transfer to PublishedGameboard as 'categories'
		__init__ and construct_tags (switch between old code and new code)

	+ models.InteractiveResourceUserCopy.take_snapshot
		__remove_all_skills

	+ models.RefAsGameboard.__init__
		uncomment 'skill_tags' in lesson_details_field

	+ models.Gameboard.get_standards()
		comment out if self.has_interactive_version() clause to draw updated standards

Suggestions
	- consider organizing standards' subject naming
	- in interactive resources, get standard descriptions only once
		now it does at least twice(initial load, and tag-skills modal)

	- update of usercopy edition happen in views.py. => should be in the model


When a state standard is tagged with skill,
	- automatically add state standards to existing usercopy.items.skills
	- the standard info sync in Ref.combined_tags and PublishedGameboard.categories


Issues:
	- author views items donn't show standard's description on hover if the standards hadn't been a part of the lesson already. (b/c server grabs only descriptions of existing standards)


** Other Tasks **

= Write more tests
	- UserCopy.set/unset_confidence_score_questions
	- HierarchicalTag.get_all_as_tree()
	- get_all_skills_w_standards()
	- has_purchased_lessons / has_payment_record / get_disabled_lessons


= ConfidenceScore
	ConfidenceScore, instead of username, show student's actual name
	change 'vision' to 'Real World Connection'

= npm migration
	- ignore exportsOverride in bower.json and migrate just dependencies (we don't know what they are)

	- Grunt -> standard browser, project platform page
	- migrating to gulp is a huge task for standard browser

Delete the following files when confirmed that it's unnecessary
./client/src/common/components/footer-nextlesson.html
./client/src/common/components/footer-nextlesson.js
./client/src/common/components/header-nextlesson.html
./client/src/common/components/header-nextlesson.js
