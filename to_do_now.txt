Q to Erin:
	How to handle active/expired district? How should it affect especially when NL staff sees the dashboard?

Q to Duy/Eng. Team
	Keen.page_views => should we be recording events by non-paying users? Why not record other views?
		=> lift the limit and see what happens for a few days

== Admin Dashboard ==
Basic methods created for NLKeen in models.py
Query methods have been tested, and functional
extraction and import of data has been tested.
add_event has been tested 

changed page_views and download_counts methods to allow dictionary returns

Create aggregate methods to give date to front-end

For testing: user 
'timothymckenna': active Site Admin with no log in since Aug 2016
'johnsonmark': active District Admin with no log in since Feb 2017 (one school, 19 teachers)
google_user_115015740167916232812: 559d7a39e08e70000332410a (16 teachers, 7 districts)
mccartytim: '5550d964f43b4d0003a8e8f1' (> 300 teachers)
dbell704: '56a02a89590e750003cb8e42' (> 600 teachers)

Address timeout issue (for big districts, we can't retrieve the data quickly enough for table view)

build table with ko template
tested table view.
switching between different sctions doesn't properly work yet.
sort functions
make sites selectables
filter by site
click school and that school is selected
loading logo
grouping logic for 'date' data_type

=Backend=
Draft Keen migration plan
	- Deploy NLKeen tracking. => Done...
		= make changes to keen_ext
		= There will be no difference for user experience.
		= Check to see if tracking data is coming in.

=Keen=
	- Once NLKeen tracking starts, starg migrating Keen data to our DB.
		= keep querying

	- Then chagne keen_query.py so get the data from NL DB
		=> test locally -> can't test admin-dashboard locally b/c no user collection locally
		=> run the script to the productin DB
			+ page_views are the only necessary one for admin-dashboard
		=> with some data, start testing on staging

	- import Keen data to NL DB.

=Front End=
UI:
	teacher info on hover
	don't show ugly stuff while loading
	align dashboard icon with the square.

csv export

=More feature=
Backend:
	change from # of submission/answers to # of students w/ students
	add # of students with interestid
	change from last_login to last page view.

Date Range:
	make timeframe able to take objects in addition to string 

UI:
	data-range selector
	pretty table header names
	header info order

	implement Erin's mock:

	All users start from 'dsitrict' layer
	dropdown date-selector

<start here>

User.admin_site and User.admin_district determine dashboard access, not school_district_user_type
Database Performance (Index and cache)
	=> use explain() command to see performance
	=> add indeces
		- nl_keen_page_views by username + page
			ensureIndex({username: 1, page: 1})	
			in local mongo server, adding keen.created_at condition did not change query speed.
			NLKeenPageView.TABLE.ensure_index([('username', 1), ('page', 1), ('keen.created_at', 1)])
		- interactive_resources_submissions/answers by parent_id
	=> consider change iteration after inserting index (find by parent_id, then filter by timeframe) -> unnecessary
	=> if necessary, bypass metrics queries when there is a cached data 
	=> write scripts to pre-compute data & cache it

	more on performance:
		refactor get_page_views method: instead of going through the records many times, generate results with one iteration.

UI:
	include % in stats
	When I get more info from Erin, finish it up.
	UI compo:
		sidebar
		stats compo
		school logo
		data-info alignment

only 'teacher' users are included in the table & stats
	- 'no_of_active_teachers' should only include school_district_user_type='teacher'
	- other users should be included so that NL peoplpe can see admin users' usage
		=> filter should be applied in frontend


=Not urgent yet=
Setting section?
Access denied page

== standard doc fix ==

== standard-to-skill-migration ==
Discussion on Skill Browser button sizes and tag length. -> save this for future when we have a data. 
	- 20%, 30%, 45% 


** Skill Tagger **
Phase 1
	goal: 
		- curriculum team is able to start tagging skills
		- no impact to user facing feature
	x check skill functionality in lesson-details page
	x include 'focus_skill' field in gameboard_serach.skill_tags (set this up in models)
	
	x edit lesson-details page to accomodate new skill structure
	
	x auto-exclude unwanted grade during skill insertion to user_copy docs

	x standard description
	x have standards show up in item section

	x for now, setup standard-retrieval from skills, then disable it for now
	x teacher's guided

	x how to have standards from skills and old skills coexist in terms of teacher view?
		- author cannot edit state standards any more.
		- CCSS should be sync'ed with what author does.
		- we don't want to keep 'standards' field when standard-tagging is complete

		A: 
			- When needed in front end, CCSS standards are generated from skills
			- Old CCSS still exists in document, but won't be used

		B:
			- New tagging does not sync, meaning item will display old standards

		C: 
			- When CCSS are changed by the author, it override existing CCSS standards in 'stanards' field
			- fewer places to re-write code
	     => C.a: do this in backend script
	     		- I would have a better control of data. Not having to track down what's happened in front-end.
			C.b: do this in real-time in frontend

	x edit take_snapshot to quarantine skills in master usercopy

	x disable skill browser
	
	x finish writing scripts to insert skills (gather all active master user_copies)
	
	X adjust tag-skills browser based on Q to Erin.
	
	x check diffs and refactor code.
		- use set instead of list (js)
		- computed to pureComputed (js)
		- call observable only once per function

	x make tag-skills-modal universal for Ashley's compo

	x identify and remove unused routes related to skills
	
	- re-import, do all the manual tests
	
	x document the process and expectations

Between Phases
	- write a script to override standards with skills' standards
	- insert new standard (non-ccss) mapping

Phase 2
	goal: taggled skills will take effect.

	- propagate changes in master usercopy to its children edition usercopies
	- check functions in skills browser
	- pdg generation
	- project_details UI (display of skills)
	- test the process from item tagging all the way to gameboard_search (it's been tested. just do it again)

	- change front end logic to display standards. Now standards only carry '_id' and 'grade'. This is a new change,
	  and no work has been done to accomodate this.

Unleash when all skills are tagged
	-- pacerrabbit --
	+ ItemWithSkills
		__standard_by_category => __standard_by_category_new
		== displayed standards for the item to sync'ed with new tagging feature

	+ TeacherGuideSection
		item_with_standards.standards =>  .__computed_standards
		== standard table

	+ Skills Browser in browse-by-standard.html

	-- models -- 	
	+ models.ResourceWithItems.get_all_standard_ids
		enable commented-out code
		== for teacher-guide section

	+ models.RefAsGameboard
		gather skill info from metadata and transfer to PublishedGameboard as 'categories'
		__init__ and construct_tags (switch between old code and new code)

	+ models.InteractiveResourceUserCopy.take_snapshot
		__remove_all_skills

	+ models.RefAsGameboard.__init__
		uncomment 'skill_tags' in lesson_details_field

	+ models.Gameboard.get_standards()
		comment out if self.has_interactive_version() clause to draw updated standards

Suggestions
	- consider organizing standards' subject naming
	- in interactive resources, get standard descriptions only once
		now it does at least twice(initial load, and tag-skills modal)

	- update of usercopy edition happen in views.py. => should be in the model


When a state standard is tagged with skill,
	- automatically add state standards to existing usercopy.items.skills
	- the standard info sync in Ref.combined_tags and PublishedGameboard.categories


Issues:
	- author views items donn't show standard's description on hover if the standards hadn't been a part of the lesson already. (b/c server grabs only descriptions of existing standards)

** Other Tasks **

= Write more tests
	- UserCopy.set/unset_confidence_score_questions
	- HierarchicalTag.get_all_as_tree()
	- get_all_skills_w_standards()
	- has_purchased_lessons / has_payment_record / get_disabled_lessons


= ConfidenceScore
	ConfidenceScore, instead of username, show student's actual name
	change 'vision' to 'Real World Connection'

= npm migration
	- ignore exportsOverride in bower.json and migrate just dependencies (we don't know what they are)

	- Grunt -> standard browser, project platform page
	- migrating to gulp is a huge task for standard browser

Delete the following files when confirmed that it's unnecessary
./client/src/common/components/footer-nextlesson.html
./client/src/common/components/footer-nextlesson.js
./client/src/common/components/header-nextlesson.html
./client/src/common/components/header-nextlesson.js
