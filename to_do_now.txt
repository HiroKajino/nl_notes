Q to Erin:
	UI design on admin-dashboard 
		fixed width
	admin_site/district flag necessary? Could we just use 'school_district_user_type' field? => yes, necessary
	
	todo:
	change admin-dashboard privilage filter to admin_site & admin_district instead of usertype
	align dashboard icon with the square.

	What page views are important to track?
	How to handle active/expired district? How should it affect especially when NL staff sees the dashboard?

Q to Duy/Eng. Team
	When extracting Keen data, should we be concerend about _id collision with internal metrics?
	Should we be concerned about keen data increasing load to our DB significantly?
	Adding parent_id index to interactive_resource_answers/submissions 
	moved the filter logic to server for the consistency. It would look awkward to see different render logic for different tables.

== Admin Dashboard ==
Basic methods created for NLKeen in models.py
Query methods have been tested, and functional
extraction and import of data has been tested.
add_event has been tested 

changed page_views and download_counts methods to allow dictionary returns

Create aggregate methods to give date to front-end

For testing: user 
'timothymckenna': active Site Admin with no log in since Aug 2016
'johnsonmark': active District Admin with no log in since Feb 2017 (one school, 19 teachers)
google_user_115015740167916232812: 559d7a39e08e70000332410a (16 teachers, 7 districts)
mccartytim: '5550d964f43b4d0003a8e8f1' (> 300 teachers)
dbell704: '56a02a89590e750003cb8e42' (> 600 teachers)

Address timeout issue (for big districts, we can't retrieve the data quickly enough for table view)

build table with ko template
tested table view.
switching between different sctions doesn't properly work yet.
sort functions
make sites selectables
filter by site
click school and that school is selected
loading logo
grouping logic for 'date' data_type

=Backend=
Draft Keen migration plan
	- Deploy NLKeen tracking. => Done...
		= make changes to keen_ext
		= There will be no difference for user experience.
		= Check to see if tracking data is coming in.

=> Start Here on Friday
	- Once NLKeen tracking starts, starg migrating Keen data to our DB.
		= keep querying

	- Then chagne keen_query.py so get the data from NL DB

	- write scripts to pre-compute data & cache it
	- bypass metrics queries when there is a cached data

	- investigate what events are recorded and its criteria for accurate metrics (especially page_views)
		-> Are there obsolete metrics?

add student's log in history from class and lessons

=Front End=
UI:
	teacher info on hover
	pretty table header names
	header info order
	don't show ugly stuff while loading

csv export

daterage selector

Access denied page

User.admin_site and User.admin_district determine dashboard access, not school_district_user_type

== standard doc fix ==
standard docs k.cc.b.4x are now k.cc.b.4.x
old docs deleted
gameboard's categories adjusted (nothing done to published gb since they will be updated automatically)

== standard-to-skill-migration ==
Support Ticket:
Saving of interactive lessons fail due to the increased size of document after inserting skills info.
usercopy_id: 57e4bb2f64050900030473d8
bsonsize w/ skills: len(bef) 1573927 loading time 0.01 sec
bsonsize wo skills: len(aft)  217190, loadingtime 38 sec
LZString parsing fails after a certain size.
It's suspected that math lessons are unaffected due to smaller doc sizes. After Laura updated ELA skill index,
the more complex skill-standard relationshop might have caused the increased file size.

Plan: reduce file size by not including all the standard infomation

Files to work on:
	models.py: Skill.data_with_additioinal...
	frontend: how to capture standard info...
		-> how much should we change this?
		-> There are many other parts of the interactive lessons that will be affected.
			- through out interactive platform
			- propagation to ref and gameboard_search (this will involve construct_tag)
		-> would it be worth it to just change data_with_additional... and leave the frontend part for later?
		-> if I strip the standard doc within skills down to {_id: ...}, then I shouldn't have to change anything in front end?

with only _id and grade info, the str len is 675578
15 sec for doc str length of  811543
20 sed for doc str length of  880211
0.5 sec for doc str length of 675578 

Discussion on Skill Browser button sizes and tag length. -> save this for future when we have a data. 
	- 20%, 30%, 45% 


** Skill Tagger **
Phase 1
	goal: 
		- curriculum team is able to start tagging skills
		- no impact to user facing feature
	x check skill functionality in lesson-details page
	x include 'focus_skill' field in gameboard_serach.skill_tags (set this up in models)
	
	x edit lesson-details page to accomodate new skill structure
	
	x auto-exclude unwanted grade during skill insertion to user_copy docs

	x standard description
	x have standards show up in item section

	x for now, setup standard-retrieval from skills, then disable it for now
	x teacher's guided

	x how to have standards from skills and old skills coexist in terms of teacher view?
		- author cannot edit state standards any more.
		- CCSS should be sync'ed with what author does.
		- we don't want to keep 'standards' field when standard-tagging is complete

		A: 
			- When needed in front end, CCSS standards are generated from skills
			- Old CCSS still exists in document, but won't be used

		B:
			- New tagging does not sync, meaning item will display old standards

		C: 
			- When CCSS are changed by the author, it override existing CCSS standards in 'stanards' field
			- fewer places to re-write code
	     => C.a: do this in backend script
	     		- I would have a better control of data. Not having to track down what's happened in front-end.
			C.b: do this in real-time in frontend

	x edit take_snapshot to quarantine skills in master usercopy

	x disable skill browser
	
	x finish writing scripts to insert skills (gather all active master user_copies)
	
	X adjust tag-skills browser based on Q to Erin.
	
	x check diffs and refactor code.
		- use set instead of list (js)
		- computed to pureComputed (js)
		- call observable only once per function

	x make tag-skills-modal universal for Ashley's compo

	x identify and remove unused routes related to skills
	
	- re-import, do all the manual tests
	
	x document the process and expectations

Between Phases
	- write a script to override standards with skills' standards
	- insert new standard (non-ccss) mapping

Phase 2
	goal: taggled skills will take effect.

	- propagate changes in master usercopy to its children edition usercopies
	- check functions in skills browser
	- pdg generation
	- project_details UI (display of skills)
	- test the process from item tagging all the way to gameboard_search (it's been tested. just do it again)

	- change front end logic to display standards. Now standards only carry '_id' and 'grade'. This is a new change,
	  and no work has been done to accomodate this.

Unleash when all skills are tagged
	-- pacerrabbit --
	+ ItemWithSkills
		__standard_by_category => __standard_by_category_new
		== displayed standards for the item to sync'ed with new tagging feature

	+ TeacherGuideSection
		item_with_standards.standards =>  .__computed_standards
		== standard table

	+ Skills Browser in browse-by-standard.html

	-- models -- 	
	+ models.ResourceWithItems.get_all_standard_ids
		enable commented-out code
		== for teacher-guide section

	+ models.RefAsGameboard
		gather skill info from metadata and transfer to PublishedGameboard as 'categories'
		__init__ and construct_tags (switch between old code and new code)

	+ models.InteractiveResourceUserCopy.take_snapshot
		__remove_all_skills

	+ models.RefAsGameboard.__init__
		uncomment 'skill_tags' in lesson_details_field

	+ models.Gameboard.get_standards()
		comment out if self.has_interactive_version() clause to draw updated standards

Suggestions
	- consider organizing standards' subject naming
	- in interactive resources, get standard descriptions only once
		now it does at least twice(initial load, and tag-skills modal)

	- update of usercopy edition happen in views.py. => should be in the model


When a state standard is tagged with skill,
	- automatically add state standards to existing usercopy.items.skills
	- the standard info sync in Ref.combined_tags and PublishedGameboard.categories


Issues:
	- author views items donn't show standard's description on hover if the standards hadn't been a part of the lesson already. (b/c server grabs only descriptions of existing standards)

** Other Tasks **

= Write more tests
	- UserCopy.set/unset_confidence_score_questions
	- HierarchicalTag.get_all_as_tree()
	- get_all_skills_w_standards()
	- has_purchased_lessons / has_payment_record / get_disabled_lessons

= Heroku Migration
	push to main app

= npm migration
	- ignore exportsOverride in bower.json and migrate just dependencies (we don't know what they are)

	- Grunt -> standard browser, project platform page
	- migrating to gulp is a huge task for standard browser



= Admin Dashboard	
	1. admin-page:
		- Do this fist to make it easy to test the above feature
		- Peruse: edit users' district_admin status
		- district_access, and site_access_flag
			- let the user see all users' info within the district
		- 
		
		Add to User document
			- district_admin_user: T/F
			- district_access: T/F
			- district_access: T/F

	2. my-nextlesson page:
		- UI adjustment
		- only visible to admin users
	
		
	3. add page metrics to track usage
	Access Denied page(403):
		- Any current 403 page?

	Build district_dashboard page
	
	Questions:
	- admin dashbaord:
		* 'user_type' in edit-user-modal (for site admin pag) is recorded in DB as school_district_user_type
		?: What does 'school_district_account_type' does?
		?: How do you want to use 'school_district_account_type'? Do you want to base district_admin_user's value on this, for keep them separate?
		?: If so, chagne edit-user-modal's selection to dropdown.
		=> any chagnes to school_district_user_type?

	- metrics:
		? is daily_metrics obsolete?
		/metrics/daily_metrics/ returns 500


	What Metrics are being recorded and ready to be aggregated?
		Data Structure in SiteMericsModule
			 main info pools for the instance
			     - keen_page_view (grouped by teacher per page_view)
			     - lesson_info (grouped by usercopy/gb document)
				-> include submission, answers, and confidencescore
			 independent info
			     - last_login 


		Keen:
		Internal Metrics:
			
		Google Analytics:
			set up in very limited (and obscure) pages and don't understand it well. Ignore this for now.

		What information is useful for the team?
		Where do we get that info, and aggregate them?

		Admin Dashboard
			for admin_district:
				Filter By...
				date (only possible with users whose 'downloads' fields exist, which are the most users, and I'm guessing they are the newer users) 

			Group By...
			By Entire District
			By Site
			By Teacher

				num_of_intersetid_toggle'(for students):int
					analysis: count
					collection: interestid_rating_toggles,
					group_by: username
					filter: list of usernames
					* Tracking students usage is tricky because there is no direct connections between teachers and studentsc
				
				confidence_score_diff_skill': float,
				confidence_score_diff_vision': float,
			
			Issue:
				- Query limit is 100/min. How to get all the site/districts queries?
				=> stagger them in the scheduled scripts, or raise the limit?
				- Where should we store Keen query results? -> dedicated or Metrics?

			Caching and Keen Query:
				- 100 queries per min
				- 227 active site accounts
				- making query by school_district

				- gather data for 'last 30 days', and 'since account creation' -> make them easy to select
				- cache results in our DB
				- for other data range, generate a new search.

				- seems easier to store data in our own DB, though migration is difficult


			

			Implementation Ideas:
				A.
				On loading Admin Dashboard->Reports, query the server. Server returns the whole data (either district or site). When querying the server, specify the date range.
				At the server, the source of the data is defined by fields (either NL Mongo or Keen)
				Sends back the entire data (list of user information, each user in an object with their numbers) 
				Filter and grouping happens on the front end

				It's possible to directly query Keen from the browser, but it's more readable and maintainable to have one source of info (the server)

				B.
				run a query every time search conditions change

				This might be an optimal solution if the data size is not so big. However, with relatively small size of each site / district, A might work. 
				The sizes of sites/districts are small now, but we don't know how they might expand. Some districts have a very large student body. Would B be a better long term solution?
				Queries should run fast if the data is pre-computed already. Maybe run a scheduled script to generate usage data and store it in DB?

				Plan:
				Start workin on B.

		When someone downloads a lesson...
			route /track_download/....

	Delete the following files when confirmed that it's unnecessary
	./client/src/common/components/footer-nextlesson.html
	./client/src/common/components/footer-nextlesson.js
	./client/src/common/components/header-nextlesson.html
	./client/src/common/components/header-nextlesson.js
